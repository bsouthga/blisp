;; vim: set ft=clojure:
;;
;; Basic aliases
;;


;; primatives
(def {true} 1)
(def {false} 0)
(def {nil} {})


;; lispy alias for lambda
(def {fn} \)


;;
;; cleaner function definition
;;
(def {defn}
  (fn {args body}
    {def (head args)
      (fn (tail args) body )}))


(def {vafn}
  (fn {args body}
    {var (head args)
      (fn (tail args) body )}))


;;
;; logical operators
;;
(defn {not x}  {- 1 x})
(defn {or x y} {+ x y})
(defn {and a b} {* a b})


;;
;; create scope for local vars
;;
(defn {let _}
  {((fn {_} _) ())})


;;
;; Functional goodies
;;


;;
;; parameter manipulation
;;
(defn {unpack f l}
  {eval (join (list f) l)})


(defn {pack f :: xs}
  {f xs})


(def {curry} unpack)
(def {uncurry} pack)


;; flip operators of function
(defn {flip f a b}
  {f b a})


;; compose function
(defn {comp f g x}
  {f (g x)})


;; first, second, third...
(defn {first l}
  {eval (head l)})


(defn {second l}
  {eval (head (tail l))})


(defn {third l}
  {eval (head (tail (tail l)))})


;; list methods
(defn {nth n l}
  {if (= n 0)
    {first l}
    {nth (- n 1) (tail l)}})


(defn {last l}
  {nth (- (len l) 1) l})


;;
;; run functions in sequence
;;
(defn {do :: xs}
  {if (= xs nil)
    {nil}
    {last xs}})


(defn {take n l}
  {if (= n 0)
    {nil}
    {join (head l)
          (take (- n 1) (tail l))}})


(defn {drop n l}
  {if (= n 0)
    {l}
    {drop (- n 1) (tail l)}})


(defn {map f l}
  {if (= nil l)
    {l}
    {cons (f (first l)) (map f (tail l))}})


(defn {foldl f a l}
  {if (= l nil)
    {a}
    {foldl f (f a (first l)) (tail l)}})


(def {reduce} foldl)
(defn {sum l} {foldl + 0 l})
(defn {product l} {foldl * 1 l})


(def {otherwise} true)
(defn {select :: xs}
  {if (= xs nil)
    {error "No matching case for select!"}
    {if (first (first xs))
      {second (first xs)}
      {unpack select (tail xs)}}})


(defn {any :: xs}
  {sum xs})


(defn {all :: xs}
  {product xs})
