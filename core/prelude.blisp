;; vim: set ft=clojure:
;;
;; Functional goodies
;;

(load "./core/base.blisp")

;;
;; parameter manipulation
;;
(defn {unpack f l}
  {eval (join (list f) l)})

(defn {pack f :: xs}
  {f xs})


(def {curry} unpack)
(def {uncurry} pack)


;; flip operators of function
(defn {flip f a b}
  {f b a})


;; compose function
(defn {comp f g x}
  {f (g x)})


;; first element
(defn {first l}
  {eval (head l)})


;; list methods
(defn {nth n l}
  {if (= n 0)
    {first l}
    {nth (- n 1) (tail l)}})


(defn {last l}
  {nth (- (len l) 1) l})

;;
;; run functions in sequence
;;
(defn {do :: xs}
  {if (= xs nil)
    {nil}
    {last xs}})


(defn {take n l}
  {if (= n 0)
    {nil}
    {join (head l)
          (take (- n 1) (tail l))}})


(defn {drop n l}
  {if (= n 0)
    {l}
    {drop (- n 1) (tail l)}})

(defn {map f l}
  {if (= nil l)
    {l}
    {cons (f (first l)) (map f (tail l))}})

(defn {foldl f a l}
  {if (= l nil)
    {a}
    {foldl f (f a (first l)) (tail l)}})

(defn {sum l} {foldl + 0 l})
(defn {product l} {foldl * 1 l})

;;
;; TODO
;;
;; - any
;; - all
;; - case
;;
